*************************************************** Loading Data **************************************************
*************************************************** Loading Data **************************************************
*************************************************** Loading Data **************************************************
************************************************ Model: ScrabbleGAN ***********************************************
*************************************************** Loading Data **************************************************
************************************************ Model: ScrabbleGAN ***********************************************
*************************************************** Loading Data **************************************************
************************************************ Model: ScrabbleGAN ***********************************************
*************************************************** Loading Data **************************************************
************************************************ Model: ScrabbleGAN ***********************************************
*************************************************** Loading Data **************************************************
************************************************ Model: ScrabbleGAN ***********************************************
ScrabbleGAN(
  (R): Recognizer(
    (convs): Sequential(
      (0): Sequential(
        (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (1): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (2): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (3): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 1), padding=(0, 1), dilation=1, ceil_mode=False)
      )
      (4): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (5): Sequential(
        (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 1), padding=(0, 1), dilation=1, ceil_mode=False)
      )
      (6): Sequential(
        (0): Conv2d(512, 512, kernel_size=(2, 2), stride=(1, 1))
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (output): Linear(in_features=512, out_features=93, bias=True)
    (prob): LogSoftmax(dim=2)
  )
  (G): Generator(
    (activation): ReLU()
    (shared): identity()
    (linear): SNLinear(in_features=2976, out_features=8192, bias=True)
    (blocks): ModuleList(
      (0): ModuleList(
        (0): GBlock(
          (activation): ReLU()
          (conv1): SNConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn1): ccbn(
            out: 512, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=512, bias=False)
            (bias): SNLinear(in_features=32, out_features=512, bias=False)
          )
          (bn2): ccbn(
            out: 256, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=256, bias=False)
            (bias): SNLinear(in_features=32, out_features=256, bias=False)
          )
        )
      )
      (1): ModuleList(
        (0): GBlock(
          (activation): ReLU()
          (conv1): SNConv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (bn1): ccbn(
            out: 256, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=256, bias=False)
            (bias): SNLinear(in_features=32, out_features=256, bias=False)
          )
          (bn2): ccbn(
            out: 128, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=128, bias=False)
            (bias): SNLinear(in_features=32, out_features=128, bias=False)
          )
        )
      )
      (2): ModuleList(
        (0): GBlock(
          (activation): ReLU()
          (conv1): SNConv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (conv_sc): SNConv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (bn1): ccbn(
            out: 128, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=128, bias=False)
            (bias): SNLinear(in_features=32, out_features=128, bias=False)
          )
          (bn2): ccbn(
            out: 64, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=64, bias=False)
            (bias): SNLinear(in_features=32, out_features=64, bias=False)
          )
        )
      )
    )
    (output_layer): Sequential(
      (0): bn()
      (1): ReLU()
      (2): SNConv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (D): Discriminator(
    (activation): ReLU()
    (blocks): ModuleList(
      (0): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (downsample): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): SNConv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(1, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (downsample): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): SNConv2d(64, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (downsample): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): SNConv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (conv1): SNConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
    )
    (linear): SNLinear(in_features=1024, out_features=1, bias=True)
    (embed): SNLinear(in_features=93, out_features=1024, bias=True)
  )
)

***************************************************** Training ****************************************************
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Epoch [1/32] xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
********************************* Loading Data *********************************
****************************** Model: ScrabbleGAN ******************************
ScrabbleGAN(
  (R): Recognizer(
    (convs): Sequential(
      (0): Sequential(
        (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (1): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      )
      (2): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (3): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 1), padding=(0, 1), dilation=1, ceil_mode=False)
      )
      (4): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (5): Sequential(
        (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): ReLU(inplace=True)
        (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 1), padding=(0, 1), dilation=1, ceil_mode=False)
      )
      (6): Sequential(
        (0): Conv2d(512, 512, kernel_size=(2, 2), stride=(1, 1))
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (output): Linear(in_features=512, out_features=93, bias=True)
    (prob): LogSoftmax(dim=2)
  )
  (G): Generator(
    (activation): ReLU()
    (shared): identity()
    (linear): SNLinear(in_features=2976, out_features=8192, bias=True)
    (blocks): ModuleList(
      (0): ModuleList(
        (0): GBlock(
          (activation): ReLU()
          (conv1): SNConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (bn1): ccbn(
            out: 512, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=512, bias=False)
            (bias): SNLinear(in_features=32, out_features=512, bias=False)
          )
          (bn2): ccbn(
            out: 256, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=256, bias=False)
            (bias): SNLinear(in_features=32, out_features=256, bias=False)
          )
        )
      )
      (1): ModuleList(
        (0): GBlock(
          (activation): ReLU()
          (conv1): SNConv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (bn1): ccbn(
            out: 256, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=256, bias=False)
            (bias): SNLinear(in_features=32, out_features=256, bias=False)
          )
          (bn2): ccbn(
            out: 128, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=128, bias=False)
            (bias): SNLinear(in_features=32, out_features=128, bias=False)
          )
        )
      )
      (2): ModuleList(
        (0): GBlock(
          (activation): ReLU()
          (conv1): SNConv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (conv_sc): SNConv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (bn1): ccbn(
            out: 128, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=128, bias=False)
            (bias): SNLinear(in_features=32, out_features=128, bias=False)
          )
          (bn2): ccbn(
            out: 64, in: 32, cross_replica=False
            (gain): SNLinear(in_features=32, out_features=64, bias=False)
            (bias): SNLinear(in_features=32, out_features=64, bias=False)
          )
        )
      )
    )
    (output_layer): Sequential(
      (0): bn()
      (1): ReLU()
      (2): SNConv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (D): Discriminator(
    (activation): ReLU()
    (blocks): ModuleList(
      (0): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (downsample): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): SNConv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(1, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (downsample): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): SNConv2d(64, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(64, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (downsample): AvgPool2d(kernel_size=2, stride=2, padding=0)
          (conv1): SNConv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv_sc): SNConv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (3): ModuleList(
        (0): DBlock(
          (activation): ReLU()
          (conv1): SNConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (conv2): SNConv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
    )
    (linear): SNLinear(in_features=1024, out_features=1, bias=True)
    (embed): SNLinear(in_features=93, out_features=1024, bias=True)
  )
)

*********************************** Training ***********************************
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Epoch [1/32] xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
